<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
  <entry key="get-current-key">
    SELECT AUTO_INCREMENT
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_SCHEMA = 'realmaster'
    AND TABLE_NAME = ?;
  </entry>
  <entry key="get-users">
    Select id, username, name, email, mobile_no, status
    FROM mst_user;
  </entry>

  <entry key="user-findby-username">
    SELECT * FROM `mst_user` WHERE `email`= ?
  </entry>

  <entry key="get-renter-by-id">
    Select id, lastname, firstname, initial, email,
    mobileno, telno, address1 as address, status
    FROM mst_renter
    WHERE id
    = ?;
  </entry>
  <entry key="get-renter-by-name">
    Select id, lastname, firstname, initial, email,
    mobileno, telno, address1 as address, status
    FROM mst_renter
    WHERE
    lastname = ? AND firstname = ? AND initial = ?
  </entry>

  <entry key="get-users-by-id">
    Select id, username, name, email, mobile_no, status
    FROM mst_user where id = ?;
  </entry>
  <entry key="save-renter">
    INSERT INTO mst_renter
    (firstname,
    lastname,
    initial,
    email,
    mobileno,
    telno,
    address1,
    idPresentend,
    emergencyContact,
    status,
    aptId,
    roomId)
    VALUES
    (:firstName,
    :lastName,
    :initial,
    :email,
    :mobileNo,
    :telno,
    :address,
    :idPresented,
    :emergencyContact,
    :status,
    :aptId,
    :roomId);
  </entry>
  <entry key="update-renter">
    Update mst_renter
    SET firstname = :firstName ,
    lastname = :lastName ,
    initial = :initial,
    email = :email,
    mobileno =
    :mobileNo,
    telno = :telno,
    address1 = :address,
    idPresentend =
    :idPresented,
    emergencyContact = :emergencyContact,
    status = :status
    WHERE id = :id
  </entry>
  <entry key="save-transaction">
    INSERT INTO `tx_rental`
    (`id`,
    `aptId`,
    `roomId`,
    `dueDate`,
    `txDate`,
    `startDate`,
    `endDate`,
    `deposit`,
    `renterId`,
    `balance`,
    `txType`,
    `provider`,
    `amount`,
    `status`,
    `userId`,
    `updatedDate`,
    `billingNo`,
    `updtCnt`)
    VALUES
    (:id,
    :aptId,
    :roomId,
    :dueDate,
    :txDate,
    :startDate,
    :endDate,
    :deposit,
    :renterId,
    :balance,
    :txType,
    :provider,
    :amount,
    :status,
    :userId,
    :updatedDate,
    :billingNo,
    :updtCnt);
  </entry>
  <entry key="update-transaction">
    UPDATE `tx_rental` SET
    `id` = :id,
    `aptId` = :aptId,
    `roomId` = :roomId,
    `dueDate` = :dueDate,
    `txDate` = :txDate,
    `startDate` = :startDate,
    `endDate` = :endDate,
    `deposit` = :deposit,
    `renterId` = :renterId,
    `balance` = :balance,
    `txType` = :txType,
    `provider` = :provider,
    `amount` = :amount,
    `status` = :status,
    `userId` = :userId,
    `updatedDate` = :updatedDate,
    `billingNo` =
    :billingNo,
    `updtCnt` = :updtCnt
    WHERE
    `id`= :id AND `aptId` = :aptId
    AND `roomId` = :roomId;
  </entry>
  <entry key="get-rental">
    SELECT id, aptId, roomId, dueDate,txDate, startDate,
    endDate, deposit,
    renterId, balance, txType, provider, amount,
    status, userId,
    updatedDate, updtCnt
    FROM tx_rental WHERE id = ?
  </entry>

  <entry key="rental-all">
    SELECT r.*, a.name as aptName
    FROM tx_rental r
    left
    join mst_apartment a
    on r.aptId = a.id
  </entry>

  <entry key="rental-by-apt">
    SELECT r.*, a.name as aptName
    FROM tx_rental r
    left
    join mst_apartment a
    on r.aptId = a.id
    where r.aptId = ?;
  </entry>

  <entry key="rental-by-aptroom">
    SELECT r.*, a.name as aptName
    FROM tx_rental r
    left
    join mst_apartment a
    on r.aptId = a.id
    where aptId = ? and roomId = ?;
  </entry>

  <entry key="get-apartments">
    SELECT * FROM mst_apartment;
  </entry>
  <entry key="get-apartments-vacant">
    SELECT distinct a.* FROM mst_apartment a LEFT JOIN
    mst_room r on a.id = r.aptId where
    r.id not in (SELECT roomId FROM
    mst_renter where roomId IS NOT NULL)
  </entry>
  <entry key="get-apartment">
    SELECT * FROM mst_apartment WHERE id = ?;
  </entry>
  <entry key="get-rooms">
    SELECT * FROM mst_room
    WHERE aptId = ?
  </entry>
  <entry key="rooms-findall">
    select * from mst_room;
  </entry>
  <entry key="room-by-apt-room">
    select * from mst_room where aptId = ? and id = ?;
  </entry>
  <entry key="get-rooms-vacant">
    select * from mst_room r where r.id not in (select
    roomId from mst_renter
    where roomId is not null) and r.aptId = ?;
  </entry>
  <entry key="get-room-by-id">
    SELECT
    id,
    aptId,
    floor,
    roomNo,
    roomType,
    size,
    occupied,
    telNo,
    rate,
    roomDesc as description,
    status
    FROM mst_room
    WHERE id = ?
  </entry>
  <entry key="get-active-renters">
    SELECT
    renter.*,
    a.name as apartmentName,
    r.roomDesc as
    roomName
    FROM mst_renter as renter
    left join mst_apartment a on
    renter.aptId = a.id
    left join mst_room r on renter.roomId = r.id
    WHERE renter.status = 'active';
  </entry>
  <entry key="renter-apt-room">
    SELECT * FROM mst_renter where
    aptId = ? and roomId =
    ?
  </entry>
  <entry key="renters-by-apt">
    SELECT
    renter.*,
    a.name as apartmentName,
    r.roomDesc as
    roomName
    FROM mst_renter as renter
    left join mst_apartment a on
    renter.aptId = a.id
    left join mst_room r on renter.roomId = r.id
    WHERE a.id = ? and renter.status = 'active';
  </entry>
  <entry key="get-renters-info">
    SELECT
    renter.id,
    rent.aptId,
    rent.roomId,
    rent.txType as
    rentType,
    rent.roomId,
    rent.dueDate,
    rent.startDate,
    rent.endDate,
    rent.deposit,
    rent.balance,
    rent.txType,
    rent.id as txId,
    rent.amount,
    apt.name as aptName,
    room.roomNo as roomName,
    room.rate as roomRate
    FROM mst_renter as renter
    LEFT JOIN tx_rental as rent
    ON renter.id =
    rent.renterId
    LEFT JOIN mst_apartment as apt
    ON rent.aptId = apt.id
    LEFT JOIN mst_room as room
    ON rent.roomId = room.id
    WHERE renter.id =
    ? and rent.status = 'active';
  </entry>
  <entry key="get-renters-info-by-status">
    SELECT
    renter.id,
    renter.mobileno as mobileNumber,
    rent.aptId,
    rent.roomId,
    rent.txType as rentType,
    rent.roomId,
    rent.dueDate,
    rent.startDate,
    rent.endDate,
    rent.deposit,
    rent.balance,
    rent.txType,
    rent.id as txId,
    rent.amount,
    apt.name as aptName,
    room.roomNo as roomName,
    room.rate as roomRate,
    room.roomDesc as
    roomDesc
    FROM mst_renter as renter
    LEFT JOIN tx_rental as rent
    ON
    renter.id = rent.renterId
    LEFT JOIN mst_apartment as apt
    ON rent.aptId
    = apt.id
    LEFT JOIN mst_room as room
    ON rent.roomId = room.id
    WHERE
    rent.status = ?;
  </entry>
  <entry key="get-transaction-by-renterid">
    SELECT
    id,
    aptId,
    roomId,
    dueDate,
    txDate,
    startDate,
    endDate,
    renterId,
    balance,
    txType,
    status,
    amount
    FROM tx_rental
    WHERE
    renterId = ?
  </entry>
  <entry key="get-transaction-by-renterid-status">
    SELECT
    rental.id,
    rental.aptId,
    apt.name as aptName,
    rental.roomId,
    rental.dueDate,
    rental.txDate,
    rental.startDate,
    rental.endDate,
    rental.renterId,
    rental.balance,
    rental.txType,
    rental.status,
    rental.amount
    FROM tx_rental rental
    LEFT JOIN
    mst_apartment apt
    ON rental.aptId = apt.id
    WHERE rental.renterId = ?
    AND rental.status = ?
  </entry>
  <entry key="get-transaction-by-apt-room">
    SELECT r.*, a.name as aptName
    FROM tx_rental r
    left
    join mst_apartment a
    on r.aptId = a.id
    where r.aptId = ? and r.roomId
    = ?;
  </entry>
  <entry key="get-transaction-by-apt-room-renter">
    SELECT
    rental.id,
    rental.aptId,
    rental.roomId,
    rental.dueDate,
    rental.txDate,
    rental.startDate,
    rental.endDate,
    rental.renterId,
    rental.balance,
    rental.txType,
    rental.status,
    rental.amount
    FROM tx_rental rental
    WHERE rental.aptId = ? AND
    rental.roomId = ? AND rental.renterId = ? AND
    rental.status =
    'active'
  </entry>
  <entry key="get-renter-by-apt-room">
    SELECT
    a.aptId,
    a.roomId,
    a.txType as paymentType,
    b.id,
    b.firstname as firstName,
    b.lastname as lastName,
    b.initial,
    b.mobileno as mobileNumber,
    b.email,
    a.id as txId,
    a.duedate as
    dueDate,
    a.startDate,
    a.duedate as endDate,
    a.deposit,
    a.balance,
    a.amount,
    a.status,
    a.paymentStatus
    FROM tx_rental a left join
    mst_renter b on a.renterId = b.id
    WHERE a.aptId = ? AND a.roomId = ?
  </entry>
  <entry key="save-collection">
    INSERT INTO tx_collections
    (`renterId`,
    `txId`,
    `roomId`,
    `aptId`,
    `currentRoomRate`,
    `amountPaid`,
    `balance`,
    `deposit`,
    `cashChange`,
    `cashReceived`,
    `txDate`,
    `userId`,
    `status`,
    `collectionNo`)
    VALUES
    (:renterId,
    :txId,
    :roomId,
    :aptId,
    :currentRoomRate,
    :amountPaid,
    :balance,
    :deposit,
    :cashChange,
    :cashReceived,
    :txDate,
    :userId,
    :status,
    :collectionNo);
  </entry>
  <entry key="save-collection-details">
    INSERT INTO tx_collections_details
    (`collectionId`,
    `aptId`,
    `roomId`,
    `txId`,
    `amountPaid`,
    `balance`,
    `deposit`,
    `txDate`,
    `status`)
    VALUES
    (:collectionId,
    :aptId,
    :roomId,
    :txId,
    :amountPaid,
    :balance,
    :deposit,
    :txDate,
    :status)
  </entry>
  <entry key="collection-lastpayment">
    SELECT * FROM tx_collections
    WHERE aptId = ? and
    roomId = ? order by txDate desc limit 1;
  </entry>
  <entry key="collection-findby-billing">
    select * from tx_collections where billingNo = ?
  </entry>
  <entry key="collection-by-renter-lastpayment">
    SELECT * FROM tx_collections
    WHERE renterId = ? and
    aptId = ? and roomId = ? order by txDate desc limit 1;
  </entry>
  <entry key="transaction-findby-status">
    select * from tx_rental where status = ?
  </entry>

  <entry key="transaction-findby-duedateandstatus">
    select * from (
      select id, aptId, roomId, date_format(dueDate, '%Y-%m-%d') as dueDate,
      txtDate, startDate, endDate, deposit, renterId, balance,  txType, provider,
      amount, status, userId, updatedDate, updtCnt, paymentStatus, billingNo, collectionNo
      from tx_rental)
    as x  where x.dueDate = ? and x.status = ?
  </entry>

  <entry key="save-room">
    INSERT INTO mst_room
    (`id`,
    `aptId`,
    `floor`,
    `roomNo`,
    `roomType`,
    `size`,
    `occupied`,
    `telNo`,
    `rate`,
    `status`)
    VALUES
    (?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?);
  </entry>
  <entry key="update-room">
    SET @id = ?,
    @aptId = ?,
    @floor = ?,
    @roomNo = ?,
    @roomType = ?,
    @size = ?,
    @occupied = ?,
    @telNo = ?,
    @rate = ?,
    @status =
    ?;

    UPDATE mst_room SET
    `id` = @id
    `aptId` = @aptId,
    `floor` = @floor,
    `roomNo` = @roomNo,
    `roomType` = @roomType,
    `size` = @size,
    `occupied`
    = @occupied,
    `telNo` = @telNo,
    `rate` = @rate,
    `status` = @status
    WHERE
    id = @id
  </entry>
  <entry key="get-sms-by-id">
    SELECT id, message, sender, recipient, sendDate,
    receivedDate,
    messageType, requestId, shortcode, timestamp, status,
    deleted
    FROM tx_sms WHERE id
    = ?
  </entry>
  <entry key="get-all-sms">
    SELECT id, message, sender, recipient, sendDate,
    receivedDate,
    messageType, requestId, shortcode, timestamp, status,
    deleted
    FROM tx_sms
  </entry>
  <entry key="update-sms">
    SET @id = ?,
    @message = ?,
    @sender = ?,
    @recipient = ?,
    @sendDate = ?,
    @receivedDate = ?,
    @messageType = ?,
    @requestId = ?,
    @shortcode = ?,
    @timestamp = ?,
    @status = ?,
    @deleted = ?;

    UPDATE
    mst_room SET
    `id` = @id
    `message` = @message,
    `sender` = @sender,
    `recipient` = @recipient,
    `sendDate` = @sendDate,
    `receivedDate` =
    @receivedDate,
    `messageType` = @messageType,
    `requestId` = @requestId,
    `shortcode` = @shortcode,
    `timestamp` = @timestamp,
    `status` =
    @status,
    `deleted` = @deleted
    WHERE id = @id
  </entry>
  <entry key="save-sms">
    INSERT INTO tx_sms
    (id,
    message,
    sender,
    recipient,
    sendDate,
    receivedDate,
    messageType,
    requestId,
    shortcode,
    timestamp,
    status,
    deleted)
    VALUES
    (:id,
    :message,
    :sender,
    :recipient,
    :sendDate,
    :receivedDate,
    :messageType,
    :requestId,
    :shortcode,
    :timestamp,
    :status,
    :deleted);

  </entry>
  <entry key="electric-findby-apt">
    SELECT el.id, el.aptId, el.roomId, el.currentReading,
    el.previousReading, provider, accountNo,
    diffReading, amount,
    overdue, el.status, readingDate, dueDate,
    billingNo,
    generationDate,payment, rm.roomNo as roomNumber,
    ap.name as
    apartmentName, meterNo, lastBillNo as billingNo, totalAmount
    FROM
    mst_electric el LEFT JOIN mst_room rm on
    el.roomId = rm.id
    LEFT JOIN
    mst_apartment ap on
    el.aptId = ap.id
    WHERE el.aptId = ?
  </entry>
  <entry key="electricprovider-by-provider">
    SELECT * FROM prm_electric WHERE provider = ?
  </entry>
  <entry key="save-billing">
    INSERT INTO `tx_billing`
    (`id`,
    `aptId`,
    `roomId`,
    `currentReading`,
    `previousReading`,
    `diffReading`,
    `provider`,
    `amount`,
    `overdue`,
    `readingDate`,
    `dueDate`,
    `generationDate`,
    `billingNo`,
    `billType`,
    `deposit`,
    `status`,
    `renterId`,
    `txDate`)
    VALUES
    (:id,
    :aptId,
    :roomId,
    :currentReading,
    :previousReading,
    :diffReading,
    :provider,
    :amount,
    :overdue,
    :readingDate,
    :dueDate,
    :generationDate,
    :billingNo,
    :billType,
    :deposit,
    :status,
    :renterId,
    :txDate);
  </entry>
  <entry key="save-electricbill">
    INSERT INTO `tx_billing`
    (`id`,
    `aptId`,
    `roomId`,
    `currentReading`,
    `previousReading`,
    `diffReading`,
    `provider`,
    `amount`,
    `overdue`,
    `readingDate`,
    `dueDate`,
    `generationDate`,
    `billingNo`,
    `lastBillNo`,
    `billType`)
    VALUES
    (:id,
    :aptId,
    :roomId,
    :currentReading,
    :previousReading,
    :diffReading,
    :provider,
    :amount,
    :overdue,
    :readingDate,
    :dueDate,
    :generationDate,
    :billingNo,
    :lastBillNo,
    :billType);
  </entry>

  <entry key="billing-findby-billingNo">
    select * from tx_billing where billingNo = ?;
  </entry>

  <entry key="billing-count-unpaid">
   select * from tx_billing where billingNo not in 
   (select billingNo from tx_collections where aptId = ? and roomId = ?) 
   and aptId = ? and roomId = ?;
  </entry>
  <entry key="update-electricbill">
    UPDATE `mst_electric`
    SET
    `id` = :id,
    `aptId` = :aptId,
    `roomId` = :roomId,
    `accountNo` = :accountNo,
    `currentReading` =
    :currentReading,
    `previousReading` = :previousReading,
    `provider` =
    :provider,
    `amount` = :amount,
    `status` = :status,
    `overdue` =
    :overdue,
    `readingDate` = :readingDate,
    `dueDate` = :dueDate,
    `diffReading` =
    :diffReading,
    `billingNo` = :billingNo,
    `generationDate` =
    :generationDate,
    `payment` = :payment,
    `meterNo` =
    :meterNo,
    `lastBillNo` = :lastBillNo,
    `totalAmount` = :totalAmount
    WHERE `id` =
    :id;
  </entry>
  <entry key="billing-findby-generatedDate">
    SELECT * FROM tx_billing where billType = ?;
  </entry>
  <entry key="billing-get-hours">
    SELECT *, (TIMESTAMPDIFF(HOUR,generationDate,now())
    /24 ) numberOfDays from tx_billing where aptId = ? and billType = ?;
  </entry>
  <entry key="billing-get-latest">
    SELECT * from tx_billing where aptId = ? and roomId =
    ? and billType = ? order by generationDate desc limit 1;
  </entry>
  <entry key="save-electriccollection">
    INSERT INTO `tx_electrill_collection`
    (`id`,
    `billingNo`,
    `amount`,
    `status`,
    `overdue`,
    `collectionDate`,
    `dueDate`)
    VALUES
    (:id,
    :billingNo,
    :amount,
    :status,
    :overdue,
    :collectionDate,
    :dueDate);
  </entry>
  <entry key="update-electriccollection">
    UPDATE `tx_electrill_collection`
    SET
    `id` = :id,
    `billingNo` = :billingNo,
    `amount` = :amount,
    `status` = :status,
    `overdue` = :overdue,
    `collectionDate` = :collectionDate,
    `dueDate` =
    :dueDate
    WHERE `id` = ?;
  </entry>
  <entry key="electricbill-findby-apt-room">
    SELECT * from `mst_electric`
    WHERE aptId = ? and
    roomId = ?;
  </entry>
  <entry key="electric-report">
    select e.*, r.roomNo as roomNumber, r.roomDesc from
    mst_electric e left join mst_room r on e.roomId = r.id;
  </entry>
  <entry key="electric-report-by-apt">
    select e.*, r.roomNo as roomNumber, r.roomDesc from
    mst_electric e left join
    mst_room r on e.roomId = r.id where e.aptId
    = ?;
  </entry>

  <entry key = "message-findby-key">
    select * from `prm_message` where `key` = ?;
  </entry>
  <entry key = "authority-findby-userid">
    select * from `prm_authority` where `userId` = ?;
  </entry>
  <entry key = "token-findby-series">
    select * from `token` where `series` = ?;
  </entry>
  <entry key="token-save">
    insert into `token` (
    `series`, `value`, `date`, `ipAddress`, `userAgent`, `userLogin`)
    values(
    :series,
    :value,
    :date,
    :ipAddress,
    :userAgent,
    :userLogin
    );
  </entry>
  <entry key="token-delete">
    delete from `token` where `series` = ?
  </entry>

</properties>